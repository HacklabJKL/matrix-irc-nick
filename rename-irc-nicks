#!/usr/bin/env python3
import re
import string
import time
import yaml
import requests
from unidecode import unidecode

with open("config.yaml", 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

dry_run = False
homeserver = cfg['server']

## Take Matrix displayname and remove all invalid IRC characters
def ircify_displayname(displayname, bridge):
    # Special cases: Whatsapp phone numbers and Discord nicknames with '#'
    discord_antipattern = re.compile("#[0-9]{4}$")
    whatsapp_fi_phone = re.compile("^\+358")
    whatsapp_phone = re.compile("^\+")
    ircified = re.sub(discord_antipattern, '', displayname)
    ircified = re.sub(whatsapp_fi_phone, 'O', ircified)
    ircified = re.sub(whatsapp_phone, 'p', ircified)
    # Now making the whole string more friendly on IRC. First try transliteration
    ircified = unidecode(ircified)
    # Remove even some ascii chars which aro not allowed in IRC
    allowed = string.ascii_letters+string.digits+'_-\[]{}^`|'
    ircified = "".join(list(filter(allowed.__contains__, ircified)))
    # Then, add prefix if still has illegal char at start
    number_prefix = re.compile("^[-0-9]*")
    ircified = re.sub(number_prefix, '', ircified)
    # Finally, collect 12 first characters
    ircified = ircified[:12]
    ircified += bridge['irc_suffix']

    return ircified

def process_network(bridge, network):
    
    # find all rooms that have an alias matching given room format
    rooms = requests.get(
            "{}/_matrix/client/r0/joined_rooms".format(homeserver),
            params={
                'user_id': bridge['mxid'],
                'access_token': bridge['token']
            }).json()['joined_rooms']
    print("Joined rooms: {}".format(rooms))
    
    def is_irc_channel(room_id):
        try:
            aliases = requests.get(
                    "{}/_matrix/client/r0/rooms/{}/state/m.room.aliases/{}".format(homeserver, room_id, network['bridge_server']),
                    params={
                        'user_id': bridge['mxid'],
                        'access_token': bridge['token']
                    }).json()['aliases']
        except KeyError:
            return False
        for alias in aliases:
            if re.match(network['room_alias_format'], alias):
                return True
        return False
    
    rooms = [room for room in rooms if is_irc_channel(room)]
    print("IRC channels: {}".format(rooms))
    
    # get all users in all those rooms that have IDs matching puppet user MXID regex
    irc_users = {}
    for room in rooms:
        members = requests.get(
                "{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room),
                params={
                    'access_token': bridge['token']
                    }).json()['joined']
        for mxid, member in members.items():
            if re.match(bridge['regex'], mxid):
                irc_users[mxid] = member
    print("IRC users: {}".format(irc_users))
    
    ## Change IRC nick:
    def change_irc_nick(user, membership):
        print("Changing IRC nick for {} {}".format(user, membership))
        rooms = requests.get(
                "{}/_matrix/client/r0/joined_rooms".format(homeserver),
                params={
                    'access_token': bridge['token'],
                    'user_id': user
                }).json()['joined_rooms']
    
        def is_irc_admin_room(room_id, user):
            members = requests.get(
                    "{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room_id),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    }).json()['joined']
            return user in members and network['appservice_user'] in members and len(members)==2
    
        irc_admin_rooms = [room for room in rooms if is_irc_admin_room(room, user)]
        print("Previous IRC admin rooms for {}: {}".format(user, irc_admin_rooms))
    
        if len(irc_admin_rooms) != 1:
            for room in irc_admin_rooms:
                # just leave all the previous admin rooms if they exist
                requests.post(
                        "{}/_matrix/client/r0/rooms/{}/leave".format(homeserver, room),
                        params={
                            'access_token': bridge['token'],
                            'user_id': user
                        })
            adminroom = requests.post(
                    "{}/_matrix/client/r0/createRoom".format(homeserver),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    },
                    # this payload is just copied straight from Riot
                    json={
                        'preset':'trusted_private_chat',
                        'visibility':'private',
                        'invite':[network['appservice_user']],
                        'is_direct':True,
                        'initial_state':[{
                            'content':{'guest_access':'can_join'},
                            'type':'m.room.guest_access',
                            'state_key':''
                        }]})
            room_id = adminroom.json()['room_id']
        else:
            print("Reusing admin room")
            room_id = irc_admin_rooms[0]

        if dry_run:
            ircified = ircify_displayname(membership['display_name'], bridge)
            print("dry-run: would ircify {} to {}".format(membership['display_name'], ircified))
            return # Skip actual renaming

        time.sleep(2)
        while network['appservice_user'] not in requests.get("{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room_id), params={'access_token': bridge['token'], 'user_id': user}).json()['joined']:
            requests.post(
                    "{}/_matrix/client/r0/rooms/{}/invite".format(homeserver, room_id),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    },
                    json={
                        'user_id': network['appservice_user']
                    })
            time.sleep(2)
        txnid = str(time.time())
        ircified = ircify_displayname(membership['display_name'], bridge)
        print("ircifying {} to {}".format(membership['display_name'], ircified))
        requests.put(
                "{}/_matrix/client/r0/rooms/{}/send/m.room.message/{}".format(homeserver, room_id, txnid),
                params={
                    'access_token': bridge['token'],
                    'user_id': user
                },
                json={
                    'msgtype': 'm.text',
                    'body': "!nick {}".format(ircified)
                })             

    # for each of those users: change IRC nick to ircified displayname
    for user, membership in irc_users.items():
        change_irc_nick(user, membership)

# Main loop: Iterate through every IRC network in all bridges
for bridge_name, bridge in cfg['bridge'].items():
    for network_name, network in cfg['irc'].items():
        print("Processing {} puppets on {}...".format(bridge_name, network_name))
        process_network(bridge, network)

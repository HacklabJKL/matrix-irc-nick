#!/usr/bin/env python3
import re
import string
import time
import yaml
import requests
import psycopg2

with open("config.yaml", 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

homeserver = cfg['server']
conn = psycopg2.connect(cfg['mautrix_telegram_db'])

## Take Matrix displayname and remove all invalid IRC characters
def ircify_displayname(displayname, bridge):
    print("ircifying name {}".format(displayname))
    discord_antipattern = re.compile("#[0-9]{4}$")
    ircified = re.sub(discord_antipattern, '', displayname)
    allowed = string.ascii_letters+string.digits+'_-\[]{}^`|'
    ircified = "".join(list(filter(allowed.__contains__, ircified)))
    ircified = ircified.lstrip('-0123456789')

    ircified = ircified[:12]
    ircified += bridge['irc_suffix']
    print("ircified name is {}".format(ircified))

    return ircified

def process_network(bridge, network):
    
    # find all rooms that have an alias matching given room format
    rooms = requests.get(
            "{}/_matrix/client/r0/joined_rooms".format(homeserver),
            params={
                'access_token': bridge['token']
            }).json()['joined_rooms']
    print("Joined rooms: {}".format(rooms))
    
    def is_irc_channel(room_id):
        try:
            aliases = requests.get(
                    "{}/_matrix/client/r0/rooms/{}/state/m.room.aliases/{}".format(homeserver, room_id, network['bridge_server']),
                    params={
                        'user_id': bridge['mxid'],
                        'access_token': bridge['token']
                    }).json()['aliases']
        except KeyError:
            return False
        for alias in aliases:
            if re.match(network['room_alias_format'], alias):
                return True
        return False
    
    rooms = [room for room in rooms if is_irc_channel(room)]
    print("IRC channels: {}".format(rooms))
    
    # get all users in all those rooms that have IDs matching @_telegram_.+:hacklab.fi
    irc_users = {}
    for room in rooms:
        members = requests.get(
                "{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room),
                params={
                    'access_token': bridge['token']
                    }).json()['joined']
        for member in members:
            if re.match('@_telegram_.+:hacklab.fi', member):
                irc_users[member] = members[member]
    print("IRC users from Telegram: {}".format(irc_users))
    
    ## Change IRC nick:
    def change_irc_nick(user, membership):
        print("Changing IRC nick for {} {}".format(user, membership))
        rooms = requests.get(
                "{}/_matrix/client/r0/joined_rooms".format(homeserver),
                params={
                    'access_token': bridge['token'],
                    'user_id': user
                }).json()['joined_rooms']
    
        def is_irc_admin_room(room_id, user):
            members = requests.get(
                    "{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room_id),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    }).json()['joined']
            return user in members and network['appservice_user'] in members and len(members)==2
    
        irc_admin_rooms = [room for room in rooms if is_irc_admin_room(room, user)]
        print("Previous IRC admin rooms for {}: {}".format(user, irc_admin_rooms))
    
        if len(irc_admin_rooms) != 1:
            for room in irc_admin_rooms:
                # just leave all the previous admin rooms if they exist
                requests.post(
                        "{}/_matrix/client/r0/rooms/{}/leave".format(homeserver, room),
                        params={
                            'access_token': bridge['token'],
                            'user_id': user
                        })
            adminroom = requests.post(
                    "{}/_matrix/client/r0/createRoom".format(homeserver),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    },
                    # this payload is just copied straight from Riot
                    json={
                        'preset':'trusted_private_chat',
                        'visibility':'private',
                        'invite':[network['appservice_user']],
                        'is_direct':True,
                        'initial_state':[{
                            'content':{'guest_access':'can_join'},
                            'type':'m.room.guest_access',
                            'state_key':''
                        }]})
            room_id = adminroom.json()['room_id']
        else:
            print("Reusing admin room")
            room_id = irc_admin_rooms[0]
    
        time.sleep(2)
        while network['appservice_user'] not in requests.get("{}/_matrix/client/r0/rooms/{}/joined_members".format(homeserver, room_id), params={'access_token': bridge['token'], 'user_id': user}).json()['joined']:
            requests.post(
                    "{}/_matrix/client/r0/rooms/{}/invite".format(homeserver, room_id),
                    params={
                        'access_token': bridge['token'],
                        'user_id': user
                    },
                    json={
                        'user_id': network['appservice_user']
                    })
            time.sleep(2)
        tgid = int(re.match('^@_telegram_([-0123456789]+):hacklab\.fi$', user)[1])
        txnid = str(time.time())
        requests.put(
                "{}/_matrix/client/r0/rooms/{}/send/m.room.message/{}".format(homeserver, room_id, txnid),
                params={
                    'access_token': bridge['token'],
                    'user_id': user
                },
                json={
                    'msgtype': 'm.text',
                    'body': "!nick {}".format(ircify_displayname(get_telegram_name(tgid, membership['display_name']), bridge))
                })             
    
    def get_telegram_name(tgid, displayname):
        cur = conn.cursor()
        cur.execute('select username from puppet where id=%s', (tgid,))
        username = cur.fetchone()[0]
        cur.close()
        print("Username for {} is {}".format(tgid, username))
        if username == None:
            return re.sub(' \[TG\]$', '', displayname)
        else:
            return username

    # for each of those users: change IRC nick to ircified telegram displayname
    for user, membership in irc_users.items():
        change_irc_nick(user, membership)

# Main loop: Iterate through every IRC network in all bridges
for bridge_name, bridge in cfg['bridge'].items():
    for network_name, network in cfg['irc'].items():
        print("Processing {} puppets on {}...".format(bridge_name, network_name))
        process_network(bridge, network)
